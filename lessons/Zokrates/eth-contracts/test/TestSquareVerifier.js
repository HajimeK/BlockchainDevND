// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

const Verifier = artifacts.require('Verifier');
const proof = require('../../zokrates/code/square/proof.json');

contract('Verifier ', accounts => {
    const account0 = accounts[0];
    let verifier;

    describe('Test for verifyTx', () => {
        beforeEach(async () => {
            verifier = await Verifier.deployed();
            //console.log(verifier);
        });

        it('Test verification with correct proof', async () => {
            try {
                const result = await verifier.verifyTx.call(
                    proof.proof.a,
                    proof.proof.b,
                    proof.proof.c,
                    proof.inputs,
                    {from: account0});
                assert.isTrue(result, 'Incorrect result for incorrect proof');
            } catch (e) {
                console.log(e);
            }
        });

        it('Test verification with incorrect proof', async () => {
            let result;
            // Tampered Top hex to F
            let {
                proof: {
                    a,
                    b,
                    c
                },
                inputs
            } = proof;
            inputs[0] = "0x0000000000000000000000000000000000000000000000000000000000000001";
            inputs[1] = "0x0000000000000000000000000000000000000000000000000000000000000001";
            this.result = await verifier.verifyTx.call(a, b, c, inputs, {from: account0});
            assert.isFalse(this.result, 'Incorrect result for incorrect proof');
        });
    });
});