// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Web3 = require('web3');

const Verifier = artifacts.require('Verifier');
let web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
let verifier = new web3.eth.Contract(Verifier.abi, "0x4e65ea75b410cf479b241d24cC55Cc2dc448477A");
let msg = 'Hello, signature';
let hash = web3.utils.sha3(msg);


contract('Verifier ', accounts => {
    describe('Test for verifyTx', () => {
        beforeEach(async () => {
            ;
        });

        it('Test verification with correct proof', async () => {
            try {
                console.log("message: " + msg);
                console.log("message hash: " + hash);

                web3.eth.getAccounts(async (error, accounts) => {
                    let signature = await web3.eth.sign(hash, accounts[0]);
                    console.log("account: " + accounts[0]);
                    signature = signature.substr(2); //remove 0x
                    const r = '0x' + signature.slice(0, 64)
                    const s = '0x' + signature.slice(64, 128)
                    const v = '0x' + signature.slice(128, 130)

                    console.log("Signature");
                    console.log("r: " + r);
                    console.log("s: " + s);
                    console.log("v: " + v);
                    const v_decimal = web3.utils.toDecimal(v);
                    console.log("v_decimal: " + v_decimal);
                    await verifier.methods.recoverAddr(hash, v_decimal, r, s).then((result) => {
                        console.log(result.logs[0].event);
                        assert.equal(result.logs[0].event, "evSolutionAdded", "Not an expected event");
                    });
                    // console.log(await verifier.methods.recoverAddr(hash, v_decimal, r, s).send({
                    //     from: accounts[0],
                    //     gas: 4712388,
                    //     gasPrice: 100000000000
                    // }));
                });
            } catch (e) {
                console.log(e);
            }
        });
    });
});