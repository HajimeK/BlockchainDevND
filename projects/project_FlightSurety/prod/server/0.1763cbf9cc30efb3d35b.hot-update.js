exports.id=0,exports.modules={"./src/server/server.js":function(e,s,o){"use strict";o.r(s);var t=o("./build/contracts/FlightSuretyApp.json"),r=o("./src/server/config.json"),n=o("web3"),l=o.n(n),i=o("express"),a=o.n(i);const c=o("bignumber.js");let u=r.localhost,g=new l.a(new l.a.providers.WebsocketProvider(u.url.replace("http","ws")));g.eth.defaultAccount=g.eth.accounts[0];let h=new g.eth.Contract(t.abi,u.appAddress);let d={};g.eth.defaultAccount=g.eth.accounts[0];let f=new(o("sqlite3").verbose().Database)(":memory:",e=>{if(e)return console.error(e.message);console.log("Connected to the in-memory SQlite database."),f.run("CREATE TABLE flight (flightKey INTEGER PRIMARY KEY, status INTEGER NOT NULL)")});h.events.eventRegisterFlight({fromBlock:0},(function(e,s){if(e)console.log(e);else{console.log(s);s.returnValues.flightKey;const e=0;f.run("INSERT INTO flight ("+flightKen+" , "+e+")")}})),h.events.eventApprovedAirline({fromBlock:0},(async function(e,s){if(e)console.log(e);else{console.log(s);const e=s.returnValues.index,o=s.returnValues.airline;let t=c(await h.methods.getRegistrationFee().call()).toString();h.methods.registerOracle().send({from:o,value:t,gas:4e6}).then(s=>{h.methods.getMyIndexes().call({from:o}).then(s=>{d[o]=e,console.log("Oracle registered: "+o+" indices:"+e)})}).catch(e=>{console.log("Error while registering oracles: "+o+" Error: "+e)})}})),h.events.OracleRequest({fromBlock:0},(function(e,s){if(e)console.log(e);else{console.log(s);const e=s.returnValues.index,t=s.returnValues.airline,r=s.returnValues.flight,n=s.returnValues.timestamp;for(var o in d){if(d[o].includes(e)){let s=20;h.methods.submitOracleResponse(e,t,r,n,s).send({from:o,gas:1e6}).then(o=>{console.log("Oracle response sent with statuscode: "+s+" for "+r+" and index:"+e)}).catch(e=>{console.log("Error while sending Oracle response  for "+r+" Error:"+e)})}}}}));const p=a()();p.get("/api",(e,s)=>{s.send({message:"An API for use with your Dapp!"})}),p.get("/api/GetFlightsByPassenger",(e,s)=>{console.log(e.query.passenger),s.send({message:"An API for use with your Dapp!"})}),p.get("/api/GetFlightsByAirline",(e,s)=>{console.log(e.query.airline),s.send({message:"An API for use with your Dapp!"})}),p.get("/api/GetFlightStatus",(e,s)=>{console.log(e.query.airline),console.log(e.query.flight),s.send({message:"An API for use with your Dapp!"})}),s.default=p}};