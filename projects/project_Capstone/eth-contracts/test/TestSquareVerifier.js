// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

const Verifier = artifacts.require('Verifier');


contract('Verifier ', () => {
    let instance;

    beforeEach(async () => {
        instance = await Verifier.deployed();
    });

    describe('Test for verifyTx', () => {
        // - use the contents from proof.json generated from zokrates steps
        const proof = require('../../zokrates/code/square/proof.json');

        it('Test verification with correct proof', async () => {
            const result = await instance.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);

            assert.isTrue(result, 'Incorrect result for correct proof');
        });

        it('Test verification with incorrect proof', async () => {
            // Tampered Top hex to F
            incorrectC = [
                "0xF3c9327a605450d036727d9fb2302804d1adc67bbf94d90e53983d5b960929d7",
                "0xF080044232178b7a4c2311be5a3a11c58684c0c06fe3c06de730b4c4c9cf268e"];

            const result = await instance.verifyTx.call(proof.proof.a, proof.proof.b, incorrectC, proof.inputs);

            assert.isFalse(result, 'Incorrect result for incorrect proof');
        });
    });
});